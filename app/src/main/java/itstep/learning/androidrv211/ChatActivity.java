package itstep.learning.androidrv211;

import android.annotation.SuppressLint;
import android.content.ContentValues;
import android.content.Intent;
import android.content.SharedPreferences;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.media.MediaPlayer;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ScrollView;
import android.widget.TextView;

import androidx.appcompat.app.AppCompatActivity;

import org.json.JSONArray;
import org.json.JSONException;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Comparator;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutorService;

import itstep.chat.ChatMessageAdapter;
import itstep.learning.orm.ChatMessage;

import android.os.Bundle;
import android.view.View;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.ScrollView;
import android.widget.TextView;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;
import androidx.core.content.ContextCompat;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.google.android.material.dialog.MaterialAlertDialogBuilder;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.Date;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class ChatActivity extends AppCompatActivity {

    private static final String CHAT_URL = "https://chat.momentfor.fun/";
    private static final String DB_NAME = "chat_db";
    private static final String AUTHOR_FILE_NAME = "author.name";

    private static final String TABLE_AUTHORS = "authors";
    private static final String TABLE_HISTORY = "chat_history";
    private final List<ChatMessage> messages = new ArrayList<>();
    private String currentUser = "";

    private ChatMessage messageToEdit = null;
    private TextView chatStatus;
    private RecyclerView recyclerView;
    private EditText etAuthor, etMessage;
    private CheckBox cbRememberMe;
    private MediaPlayer newMessageSound;
    private ImageView bellIcon;
    private Animation bellAnimation;
    private Button btnSend, btnClearAuthor;
    private ChatMessageAdapter adapter;
    private ExecutorService pool;
    private final Handler handler = new Handler(Looper.getMainLooper());
    private final Handler autoUpdateHandler = new Handler(Looper.getMainLooper());
    private Runnable updateRunnable;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_chat);

        initDatabase();
        loadMessagesFromDbAsync();
        debugPrintAuthorsFromDb();
        debugPrintMessagesFromDb();
        initViews();
        initRecyclerView();
        initSendButton();

        updateRunnable = () -> {
            updateChat();
            autoUpdateHandler.postDelayed(updateRunnable, 30000);
            Log.d("ChatActivity", "üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ");
        };

        updateChat();
        autoUpdateHandler.postDelayed(updateRunnable, 30000);
    }
    private void debugPrintAuthorsFromDb() {
        SQLiteDatabase db = openOrCreateDatabase(DB_NAME, MODE_PRIVATE, null);
        Cursor cursor = db.rawQuery("SELECT name FROM " + TABLE_AUTHORS, null);
        Log.d("ChatActivity", "üîç –ó–±–µ—Ä–µ–∂–µ–Ω—ñ —ñ–º–µ–Ω–∞ –∞–≤—Ç–æ—Ä—ñ–≤:");
        while (cursor.moveToNext()) {
            String name = cursor.getString(0);
            Log.d("ChatActivity", "‚û° " + name);
        }
        cursor.close();
        db.close();
    }
    private void debugPrintMessagesFromDb() {
        SQLiteDatabase db = openOrCreateDatabase(DB_NAME, MODE_PRIVATE, null);
        Cursor cursor = db.rawQuery("SELECT id, author, text, moment FROM " + TABLE_HISTORY, null);
        Log.d("ChatActivity", "üßæ –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:");
        while (cursor.moveToNext()) {
            Log.d("ChatActivity", "üó®Ô∏è " +
                    cursor.getString(0) + " | " +
                    cursor.getString(1) + ": " +
                    cursor.getString(2) + " @ " +
                    cursor.getString(3));
        }
        cursor.close();
        db.close();
    }
    private void initDatabase() {
        SQLiteDatabase db = openOrCreateDatabase(DB_NAME, MODE_PRIVATE, null);
        db.execSQL("CREATE TABLE IF NOT EXISTS " + TABLE_AUTHORS + " (name TEXT)");
        db.execSQL("CREATE TABLE IF NOT EXISTS " + TABLE_HISTORY + " (id TEXT, author TEXT, text TEXT, moment TEXT)");
        db.close();
        Log.i("ChatActivity", "üìÇ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞");
    }

    private void insertMessageIntoDb(ChatMessage msg) {
        SQLiteDatabase db = openOrCreateDatabase(DB_NAME, MODE_PRIVATE, null);
        ContentValues values = new ContentValues();
        values.put("id", msg.getId());
        values.put("author", msg.getAuthor());
        values.put("text", msg.getText());
        values.put("moment", ChatMessage.dateFormat.format(msg.getMoment()));

        long result = db.insert(TABLE_HISTORY, null, values);
        printAllMessagesFromDb();
        db.close();

        if (result == -1) {
            Log.e("ChatActivity", "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –ë–î: " + msg.toString());
        } else {
            Log.d("ChatActivity", "‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ë–î –∑ ID: " + result + ", –≤–º—ñ—Å—Ç: " + msg);
        }
    }

    private void loadMessagesFromDbAsync() {
        CompletableFuture.runAsync(() -> {
            SQLiteDatabase db = openOrCreateDatabase(DB_NAME, MODE_PRIVATE, null);
            Cursor cursor = db.rawQuery("SELECT id, author, text, moment FROM " + TABLE_HISTORY, null);

            final int[] count = {0};  // ‚¨Ö –æ–±–≥–æ—Ä—Ç–∞—î–º–æ –≤ –º–∞—Å–∏–≤

            synchronized (messages) {
                while (cursor.moveToNext()) {
                    try {
                        String id = cursor.getString(0);
                        if (messages.stream().noneMatch(msg -> msg.getId().equals(id))) {
                            ChatMessage msg = new ChatMessage(
                                    id,
                                    cursor.getString(1),
                                    cursor.getString(2),
                                    ChatMessage.dateFormat.parse(cursor.getString(3))
                            );
                            messages.add(msg);
                            count[0]++;
                        }
                    } catch (ParseException e) {
                        Log.e("ChatActivity", "‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ –¥–∞—Ç—É –∑ –ë–î", e);
                    }
                }
                messages.sort(Comparator.comparing(ChatMessage::getMoment));
            }

            cursor.close();
            db.close();

            runOnUiThread(() -> {
                adapter.notifyDataSetChanged();
                recyclerView.scrollToPosition(adapter.getItemCount() - 1);
                Log.i("ChatActivity", "üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ " + count[0] + " –Ω–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –ë–î (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)");
            });
        });
    }

    private void saveAuthorToDb(String authorName) {
        SQLiteDatabase db = openOrCreateDatabase(DB_NAME, MODE_PRIVATE, null);
        db.execSQL("DELETE FROM " + TABLE_AUTHORS);
        ContentValues values = new ContentValues();
        values.put("name", authorName);
        db.insert(TABLE_AUTHORS, null, values);
        db.close();
        Log.i("ChatActivity", "‚úÖ –Ü–º‚Äô—è –∞–≤—Ç–æ—Ä–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ë–î: " + authorName);
    }

    private String loadAuthorFromDb() {
        SQLiteDatabase db = openOrCreateDatabase(DB_NAME, MODE_PRIVATE, null);
        Cursor cursor = db.rawQuery("SELECT name FROM " + TABLE_AUTHORS + " LIMIT 1", null);
        String name = null;
        if (cursor.moveToFirst()) {
            name = cursor.getString(0);
        }
        cursor.close();
        db.close();
        Log.i("ChatActivity", name != null ? "üì• –Ü–º‚Äô—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ –ë–î: " + name : "‚ÑπÔ∏è –Ü–º‚Äô—è –∞–≤—Ç–æ—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î");
        return name;
    }

    private void initViews() {
        chatStatus = findViewById(R.id.chat_status);
        recyclerView = findViewById(R.id.recycler_messages);
        etAuthor = findViewById(R.id.et_author);
        etMessage = findViewById(R.id.et_message);
        cbRememberMe = findViewById(R.id.cb_remember_me);
        bellIcon = findViewById(R.id.bell_icon);
        btnSend = findViewById(R.id.btn_send);
        btnClearAuthor = findViewById(R.id.btn_clear_author);

        bellAnimation = AnimationUtils.loadAnimation(this, R.anim.anim_bell);
        newMessageSound = MediaPlayer.create(this, R.raw.bell_sound);

        // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ —ñ–º–µ–Ω—ñ –∞–≤—Ç–æ—Ä–∞
        String savedAuthor = loadAuthorFromFile();
        if (savedAuthor != null) {
            etAuthor.setText(savedAuthor);
            etAuthor.setEnabled(false);
            cbRememberMe.setChecked(true);
            currentUser = savedAuthor;
            Log.i("ChatActivity", "‚úÖ –Ü–º‚Äô—è –∞–≤—Ç–æ—Ä–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ —Ñ–∞–π–ª—É: " + savedAuthor);
        } else {
            Log.i("ChatActivity", "‚ÑπÔ∏è –§–∞–π–ª –∞–≤—Ç–æ—Ä–∞ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, —ñ–º‚Äô—è –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.");
        }

        btnClearAuthor.setOnClickListener(v -> {
            deleteFile(AUTHOR_FILE_NAME);
            etAuthor.setEnabled(true);
            etAuthor.setText("");
            currentUser = "";
            cbRememberMe.setChecked(false);
            showStatus("üßπ –Ü–º‚Äô—è –æ—á–∏—â–µ–Ω–æ –∑ –ø–∞–º‚Äô—è—Ç—ñ", android.R.color.darker_gray);
            Log.i("ChatActivity", "üßπ –Ü–º‚Äô—è –∞–≤—Ç–æ—Ä–∞ –æ—á–∏—â–µ–Ω–æ –∑ —Ñ–∞–π–ª—É");
        });

        findViewById(R.id.btn_debug_add).setOnClickListener(v -> generateTestMessages());
        findViewById(R.id.btn_exit).setOnClickListener(v -> finish());
        findViewById(R.id.btn_show_db_history).setOnClickListener(v -> {
            printAllMessagesFromDb();
        });
    }

    private void initRecyclerView() {
        recyclerView.setLayoutManager(new LinearLayoutManager(this));
        adapter = new ChatMessageAdapter(messages, currentUser);
        configureAdapter();
        recyclerView.setAdapter(adapter);
    }

    private void initSendButton() {
        btnSend.setOnClickListener(v -> {
            String author = etAuthor.getText().toString().trim();
            String text = etMessage.getText().toString().trim();

            if (author.isEmpty()) {
                etAuthor.setError(getString(R.string.error_empty_author));
                return;
            }
            if (text.isEmpty()) {
                etMessage.setError(getString(R.string.error_empty_message));
                return;
            }

            Log.d("ChatActivity", "‚è© –ù–∞—Ç–∏—Å–Ω—É—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è");

            if (messageToEdit != null) {
                messageToEdit.setText(text);
                adapter.notifyDataSetChanged();
                etMessage.setText("");
                messageToEdit = null;
                btnSend.setText("–ù–∞–¥—ñ—Å–ª–∞—Ç–∏");
                showStatus("‚úèÔ∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ", android.R.color.holo_blue_dark);
                Log.d("ChatActivity", "‚úèÔ∏è –û–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: " + text);
                return;
            }

            if (!author.equals(currentUser)) {
                currentUser = author;
                adapter = new ChatMessageAdapter(messages, currentUser);
                configureAdapter();
                recyclerView.setAdapter(adapter);
                etAuthor.setEnabled(false);

                // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ –∞–≤—Ç–æ—Ä–∞, —è–∫—â–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —á–µ–∫–±–æ–∫—Å
                if (cbRememberMe.isChecked()) {
                    saveAuthorToFile(author);
                } else {
                    Log.i("ChatActivity", "üìå –Ü–º‚Äô—è –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ ‚Äî —á–µ–∫–±–æ–∫—Å –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π.");
                }
            }

            ChatMessage message = new ChatMessage("0", author, text, new Date());
            adapter.addMessage(message);
            recyclerView.scrollToPosition(adapter.getItemCount() - 1);
            playNewMessageSound();
            Log.d("ChatActivity", "üì§ –î–æ–¥–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: " + text);

            CompletableFuture.runAsync(() -> {
                String response = Services.sendMessageToServer(CHAT_URL, author, text);
                Log.d("ChatActivity", "üì° –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞: " + response);

                if (response == null || response.trim().isEmpty()) {
                    runOnUiThread(() -> showStatus(getString(R.string.error_network), android.R.color.holo_red_dark));
                    return;
                }

                try {
                    JSONObject json = new JSONObject(response);
                    if (json.optInt("status", 0) == 1) {
                        runOnUiThread(() -> {
                            showStatus(getString(R.string.status_message_sent), android.R.color.holo_green_dark);
                            etMessage.setText("");
                            updateChat();
                        });
                    } else {
                        runOnUiThread(() -> showStatus("‚ùå –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞: " + json.optInt("status"), android.R.color.holo_red_dark));
                    }
                } catch (Exception e) {
                    runOnUiThread(() -> showStatus("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ JSON: " + e.getMessage(), android.R.color.holo_red_dark));
                    Log.e("ChatActivity", "‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–±–æ—Ä—É JSON", e);
                }
            });
        });
    }

    private void configureAdapter() {
        adapter.setOnItemClickListener(message -> {
            etMessage.setText(message.getText());
            messageToEdit = message;
            btnSend.setText("–û–Ω–æ–≤–∏—Ç–∏");
            Log.d("ChatActivity", "üñäÔ∏è –û–±—Ä–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è: " + message.getText());
        });

        adapter.setOnItemLongClickListener(message -> {
            messages.remove(message);
            adapter.notifyDataSetChanged();
            recyclerView.scrollToPosition(adapter.getItemCount() - 1);
            showStatus("üóëÔ∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ", android.R.color.holo_red_dark);
            Log.d("ChatActivity", "üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: " + message.getText());
        });
    }

    private void updateChat() {
        Log.i("ChatActivity", "üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Ç—É...");
        handler.postDelayed(() -> {
            pool = Executors.newFixedThreadPool(3);
            CompletableFuture
                    .supplyAsync(() -> Services.fetchUrl(CHAT_URL), pool)
                    .thenApply(this::parseChatResponse)
                    .thenAccept(this::processChatResponse);
        }, 2000);
    }
    private void printAllMessagesFromDb() {
        SQLiteDatabase db = openOrCreateDatabase(DB_NAME, MODE_PRIVATE, null);
        Cursor cursor = db.rawQuery("SELECT id, author, text, moment FROM " + TABLE_HISTORY, null);
        Log.d("ChatActivity", "üìö –ü–æ–≤–Ω–∞ —ñ—Å—Ç–æ—Ä—ñ—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –ë–î:");
        while (cursor.moveToNext()) {
            Log.d("ChatActivity", "üó®Ô∏è " +
                    cursor.getString(0) + " | " +
                    cursor.getString(1) + ": " +
                    cursor.getString(2) + " @ " +
                    cursor.getString(3));
        }
        cursor.close();
        db.close();
    }
    private List<ChatMessage> parseChatResponse(String body) {
        List<ChatMessage> parsed = new ArrayList<>();
        if (body == null || body.trim().isEmpty()) {
            showStatus("‚ùå –ü–æ—Ä–æ–∂–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞", android.R.color.holo_red_dark);
            return parsed;
        }

        try {
            JSONObject json = new JSONObject(body);
            if (json.optInt("status", 0) != 1) {
                showStatus("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Å—Ç–∞—Ç—É—Å –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞", android.R.color.holo_red_dark);
                return parsed;
            }

            JSONArray data = json.getJSONArray("data");
            for (int i = 0; i < data.length(); i++) {
                ChatMessage msg = ChatMessage.fromJsonObject(data.getJSONObject(i));
                parsed.add(msg);
                Log.d("ChatMessage", "‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ: id=" + msg.getId() + ", –∞–≤—Ç–æ—Ä=" + msg.getAuthor() + ", —Ç–µ–∫—Å—Ç=" + msg.getText());
            }
        } catch (Exception e) {
            Log.e("ChatActivity", "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ JSON", e);
            showStatus("‚ùå JSON –ø–æ–º–∏–ª–∫–∞", android.R.color.holo_red_dark);
        }

        return parsed;
    }

    private void processChatResponse(List<ChatMessage> parsedMessages) {
        final int[] newCount = {0};  // –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–∞—Å–∏–≤ –¥–ª—è –º–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –ª—è–º–±–¥–∏

        synchronized (messages) {
            for (ChatMessage msg : parsedMessages) {
                if (messages.stream().noneMatch(existing -> existing.getId().equals(msg.getId()))) {
                    messages.add(msg);
                    insertMessageIntoDb(msg);
                    newCount[0]++;
                }
            }
            messages.sort(Comparator.comparing(ChatMessage::getMoment));
        }

        runOnUiThread(() -> {
            adapter.notifyDataSetChanged();
            recyclerView.scrollToPosition(adapter.getItemCount() - 1);
            Log.i("ChatActivity", "üì© –ù–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ —Å–µ—Ä–≤–µ—Ä–∞: " + newCount[0]);
        });
    }


    private void showStatus(String message, int colorRes) {
        runOnUiThread(() -> {
            chatStatus.setText(message);
            chatStatus.setTextColor(getResources().getColor(colorRes, getTheme()));
            chatStatus.setVisibility(View.VISIBLE);
            handler.postDelayed(() -> chatStatus.setVisibility(View.GONE), 5000);
        });
    }

    private void playNewMessageSound() {
        if (newMessageSound != null) {
            newMessageSound.start();
            if (bellIcon != null && bellAnimation != null) {
                bellIcon.startAnimation(bellAnimation);
            }
        }
    }

    private void generateTestMessages() {
        String author = etAuthor.getText().toString().trim();
        if (!author.equals(currentUser)) {
            currentUser = author;
            adapter = new ChatMessageAdapter(messages, currentUser);
            configureAdapter();
            recyclerView.setAdapter(adapter);
        }

        Calendar calendar = Calendar.getInstance();
        adapter.addMessage(new ChatMessage("test1", "–ê–Ω–¥—Ä—ñ–π", "–°—å–æ–≥–æ–¥–Ω—ñ—à–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", calendar.getTime()));
        calendar.add(Calendar.DAY_OF_YEAR, -1);
        adapter.addMessage(new ChatMessage("test2", "–Ü—Ä–∏–Ω–∞", "–í—á–æ—Ä–∞—à–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", calendar.getTime()));
        calendar.add(Calendar.DAY_OF_YEAR, -1);
        adapter.addMessage(new ChatMessage("test3", "–û–ª–µ–∫—Å—ñ–π", "2 –¥–Ω—ñ —Ç–æ–º—É", calendar.getTime()));
    }

    private void saveAuthorToFile(String author) {
        try (FileOutputStream fos = openFileOutput(AUTHOR_FILE_NAME, MODE_PRIVATE)) {
            fos.write(author.getBytes(StandardCharsets.UTF_8));
            Log.i("ChatActivity", "üíæ –Ü–º‚Äô—è –∞–≤—Ç–æ—Ä–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª: " + author);
        } catch (IOException e) {
            Log.e("ChatActivity", "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ", e);
        }
    }

    private String loadAuthorFromFile() {
        try (FileInputStream fis = openFileInput(AUTHOR_FILE_NAME)) {
            byte[] buffer = new byte[fis.available()];
            fis.read(buffer);
            return new String(buffer, StandardCharsets.UTF_8);
        } catch (IOException e) {
            return null;
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        handler.removeCallbacksAndMessages(null);
        autoUpdateHandler.removeCallbacks(updateRunnable);
        if (newMessageSound != null) newMessageSound.release();
        if (pool != null) pool.shutdownNow();
    }
}